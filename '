#!/bin/bash

BASE_DIR="/home/etri/mediaserver"
MEDIA_DIR="${BASE_DIR}/media"
HLS_DIR="${BASE_DIR}/hls"
PLAYLIST_FILE="${BASE_DIR}/playlist.txt"
LOG_FILE="${BASE_DIR}/logs/ffmpeg.log"

# HLS 디렉토리 확인
mkdir -p ${HLS_DIR}

# 메인 플레이리스트 초기화
cat > ${HLS_DIR}/master.m3u8 << EOF
#EXTM3U
#EXT-X-VERSION:3
EOF

# 마지막으로 수정된 시간 저장 파일 경로
TIMESTAMP_FILE="${BASE_DIR}/.file_timestamps"
touch "${TIMESTAMP_FILE}" 2>/dev/null || echo "타임스탬프 파일 생성 실패" >> ${LOG_FILE}

# 파일 수정 시간 체크 함수
check_if_modified() {
  local file="$1"
  local last_modified
  local saved_time
  
  # 파일이 존재하지 않으면 변경된 것으로 간주
  if [ ! -f "$file" ]; then
    echo "파일 없음: $file" >> ${LOG_FILE}
    return 0
  fi
  
  # stat 명령어로 마지막 수정 시간 가져오기
  last_modified=$(stat -c %Y "$file" 2>/dev/null)
  if [ -z "$last_modified" ]; then
    echo "파일 상태 확인 실패: $file" >> ${LOG_FILE}
    return 0
  fi
  
  # 타임스탬프 파일에서 이전 수정 시간 가져오기
  if [ -f "$TIMESTAMP_FILE" ]; then
    saved_time=$(grep "^$file:" "$TIMESTAMP_FILE" 2>/dev/null | cut -d: -f2)
    # 값이 비어있거나 숫자가 아닌 경우 기본값 0으로 설정
    saved_time=${saved_time:-0}
  else
    saved_time=0
  fi
  
  # 디버그 정보
  echo "파일: $file, 마지막 수정: $last_modified, 저장된 시간: $saved_time" >> ${LOG_FILE}
  
  # 마지막 수정 시간이 저장된 시간보다 크면 변경된 것으로 간주
  if [ "$last_modified" -gt "$saved_time" ]; then
    echo "파일 변경됨: $file" >> ${LOG_FILE}
    return 0  # 변경됨
  else
    echo "파일 변경 없음: $file" >> ${LOG_FILE}
    return 1  # 변경 없음
  fi
}

# 수정 시간 저장 함수
save_timestamp() {
  local file="$1"
  local current_time
  
  # 파일이 존재하지 않으면 리턴
  if [ ! -f "$file" ]; then
    return
  fi
  
  # 현재 수정 시간 가져오기
  current_time=$(stat -c %Y "$file" 2>/dev/null)
  if [ -z "$current_time" ]; then
    return
  fi
  
  # 타임스탬프 파일에서 해당 라인 제거 후 새 값 추가
  if [ -f "$TIMESTAMP_FILE" ]; then
    sed -i "\|^$file:|d" "$TIMESTAMP_FILE" 2>/dev/null
  fi
  echo "$file:$current_time" >> "$TIMESTAMP_FILE"
}

# playlist.txt 파일 처리
while IFS= read -r line
do
  if [[ $line == file* ]]; then
    # 따옴표와 file 키워드 제거
    filepath=$(echo "$line" | sed "s/file '//g" | sed "s/'$//g")
    video_file=$(basename "$filepath")
    
    if [ -f "${MEDIA_DIR}/${video_file}" ]; then
      segment_name=$(basename "${video_file}" .mp4)
      segment_m3u8="${HLS_DIR}/${segment_name}.m3u8"
      
      # 파일이 수정되었거나 세그먼트 파일이 없으면 새로 생성
      if check_if_modified "${MEDIA_DIR}/${video_file}" || [ ! -f "$segment_m3u8" ]; then
        echo "처리 중: ${video_file}" >> ${LOG_FILE}
        
        # 이전 세그먼트 파일 삭제
        rm -f ${HLS_DIR}/${segment_name}*.ts
        rm -f ${HLS_DIR}/${segment_name}.m3u8
        
        # 비디오 세그먼트화 및 HLS 생성
        ffmpeg -i "${MEDIA_DIR}/${video_file}" \
          -profile:v baseline -level 3.0 \
          -start_number 0 -hls_time 5 -hls_list_size 0 \
          -hls_segment_filename "${HLS_DIR}/${segment_name}_%03d.ts" \
          "${segment_m3u8}" 2>> ${LOG_FILE}
        
        # 타임스탬프 저장
        save_timestamp "${MEDIA_DIR}/${video_file}"
      else
        echo "세그먼트 재사용: ${video_file}" >> ${LOG_FILE}
      fi
      
      # 메인 플레이리스트에 불연속성 태그와 함께 추가
      echo "#EXT-X-DISCONTINUITY" >> ${HLS_DIR}/master.m3u8
      echo "#EXTINF:0," >> ${HLS_DIR}/master.m3u8
      echo "#EXT-X-STREAM-INF:BANDWIDTH=1000000,RESOLUTION=1280x720" >> ${HLS_DIR}/master.m3u8
      echo "${segment_name}.m3u8" >> ${HLS_DIR}/master.m3u8
    else
      echo "파일 없음: ${MEDIA_DIR}/${video_file}" >> ${LOG_FILE}
    fi
  fi
done < "${PLAYLIST_FILE}"

# 메인 플레이리스트 경로를 알기 쉽게 복사
cp ${HLS_DIR}/master.m3u8 ${HLS_DIR}/playlist.m3u8

echo "HLS 스트림 생성 완료: $(date)" >> ${LOG_FILE}
